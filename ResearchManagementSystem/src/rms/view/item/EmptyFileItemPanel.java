package rms.view.item;

import java.io.File;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import rms.model.item.EmptyFileItem;
import rms.model.item.FileItem;
import rms.view.MainFrame;
import rms.view.util.Prompts;

/**
 *
 * @author Timothy
 */
public class EmptyFileItemPanel extends BaseItemPanel {

    private static final Logger LOG = Logger.getLogger(EmptyFileItemPanel.class.getName());

    /**
     * Creates new form EmptyFileItemPanel
     *
     * @param item
     * @param startCollapsed
     */
    public EmptyFileItemPanel(EmptyFileItem item, boolean startCollapsed) {
        super(item, startCollapsed);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonFileLink = new javax.swing.JButton();

        jButtonFileLink.setForeground(new java.awt.Color(0, 0, 255));
        jButtonFileLink.setActionCommand("Add File");
        jButtonFileLink.setBorderPainted(false);
        jButtonFileLink.setContentAreaFilled(false);
        jButtonFileLink.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonFileLink.setFocusPainted(false);
        jButtonFileLink.setLabel("*** Add File ***");
        jButtonFileLink.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonFileLink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFileLinkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getInnerContentPanel());
        getInnerContentPanel().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButtonFileLink)
                .addGap(0, 450, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButtonFileLink)
                .addGap(0, 13, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonFileLinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFileLinkActionPerformed
        //Prompt the user for the new file. If a selection is made, then replace
        //  the existing item with a new FileItem in the current thread and
        //  force the GUI to redraw.
        MainFrame gui = MainFrame.instance();
        List<File> selection = gui.promptFileSelection(false);//single selection
        if (!selection.isEmpty()) {
            if (selection.size() > 1) {
                LOG.log(Level.WARNING, "Somehow multiple files were selected! Using only the first.");
            }
            FileItem.CreateResult result = FileItem.createAndReplaceFileItem(displayedItem, selection.get(0));
            if (!result.success()) {
                Prompts.informUser("File Import Failed", result.error, Prompts.PromptType.ERROR);
            }
            gui.refreshSelectedThread();//no need to refresh if no selection
        }
    }//GEN-LAST:event_jButtonFileLinkActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonFileLink;
    // End of variables declaration//GEN-END:variables
}
