package rms.view;

import java.awt.Frame;
import java.util.Set;
import rms.control.Main;
import rms.model.Tag;
import rms.view.util.JPanelTagSelection;
import rms.view.util.JPanelTagSelection.DoubleClickSelectionListener;
import rms.view.util.Prompts;
import rms.view.util.Prompts.PromptType;

/**
 * Dialog for managing a list of {@link Tag}s.
 *
 * @author Timothy
 */
public final class TagManagementDialog extends javax.swing.JDialog {

    /**
     * Creates new TagManagementDialog containing the set of {@link Tag}s
     * belonging to the current {@link rms.model.State State}.
     *
     * @param parent
     */
    public TagManagementDialog(Frame parent) {
        super(parent, true);
        initComponents();
        initComponentsMore();
        setLocationRelativeTo(parent);
        getRootPane().setDefaultButton(jButtonDone);
    }

    /**
     * Display the dialog.
     */
    public void showDialog() {
        setVisible(true);
    }

    private void initComponentsMore() {
        tagSelectionPanel.addDoubleClickSelectionListener(new DoubleClickSelectionListener() {
            @Override
            public void itemsSelected(JPanelTagSelection.SelectedTags m) {
                //TODO: maybe implement rename here
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonDone = new javax.swing.JButton();
        jButtonNew = new javax.swing.JButton();
        tagSelectionPanel = new rms.view.util.JPanelTagSelection(Main.getState().getTagsUnmodifiable());
        jButtonDelete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(250, 250));

        jButtonDone.setText("Done");
        jButtonDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDoneActionPerformed(evt);
            }
        });

        jButtonNew.setText("New");
        jButtonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewActionPerformed(evt);
            }
        });

        jButtonDelete.setText("Delete");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tagSelectionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonNew)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonDone)))
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(tagSelectionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNew)
                    .addComponent(jButtonDone)
                    .addComponent(jButtonDelete))
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDoneActionPerformed
        setVisible(false);
    }//GEN-LAST:event_jButtonDoneActionPerformed

    private void jButtonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewActionPerformed
        String newName = Prompts.getUserInput("Enter new tag name", PromptType.PLAIN);
        if (newName != null && !newName.isEmpty()) {
            //create new tag and add it globally
            Main.getState().createNewTag(newName);
            //refresh the list
            tagSelectionPanel.updateListItemsShown();
        }
    }//GEN-LAST:event_jButtonNewActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        Set<Tag> selectedTags = tagSelectionPanel.getSelectedTags();

        if (selectedTags.isEmpty()) {
            Prompts.informUser("No tags selected", "Please first select the tag(s) you wish to delete.", PromptType.INFO);
        } else {
            StringBuilder message = new StringBuilder();
            message.append("You are about to delete the following tags:\n");
            for (Tag t : selectedTags) {
                message.append(" - ").append(t).append("\n");
            }
            message.append("This action cannot be undone.\nAre you sure you want to delete these tags?");

            boolean approved = Prompts.getUserApproval(message.toString(), PromptType.WARNING);
            if (approved) {
                Main.getState().deleteTags(selectedTags);
                tagSelectionPanel.updateListItemsShown();
            }
        }
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonDone;
    private javax.swing.JButton jButtonNew;
    private rms.view.util.JPanelTagSelection tagSelectionPanel;
    // End of variables declaration//GEN-END:variables
}
