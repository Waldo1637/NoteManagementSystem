package rms.view.util;

import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import rms.model.Tag;

/**
 * Generic panel for listing tags and instantly searching the list
 * 
 * @author Timothy
 */
public class JPanelTagSelection extends javax.swing.JPanel {
    
    private final ArrayList<ItemChosenListener> listeners;
    private final Set<Tag> tagList;
    
    /**
     * Creates new form TagSelectionPanel
     */
    public JPanelTagSelection() {
        this(new HashSet<Tag>());
    }
    
    public JPanelTagSelection(Set<Tag> existingTags){
        this.tagList = existingTags;
        this.listeners = new ArrayList<>();
        initComponents();
        jTextFieldSearch.getDocument().addDocumentListener(searchTextListener);
        displayList();
    }
    
        /**
     * Show only items containing the given string (case insensitive)
     * @param searchVal 
     */
    private void displayListFiltered(String searchVal){
        jListTags.setModel(new SearchTagsListModel(tagList, searchVal));
    }
    
    private void displayList(){
        displayListFiltered("");
    }
    
    private final DocumentListener searchTextListener = new DocumentListener(){
        @Override
        public void insertUpdate(DocumentEvent e) {
            displayListFiltered(jTextFieldSearch.getText());
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            displayListFiltered(jTextFieldSearch.getText());
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            displayListFiltered(jTextFieldSearch.getText());
        }
    };
    
    public Tag getResult(){
        return (Tag)jListTags.getSelectedValue();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jListTags = new javax.swing.JList();
        jTextFieldSearch = new javax.swing.JTextField();

        jListTags.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListTags.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListTagsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jListTags);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTextFieldSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTextFieldSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jListTagsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListTagsMouseClicked
        if (evt.getClickCount() == 2 && evt.getButton() == MouseEvent.BUTTON1) {
            /*
            System.out.println("Double click on " + evt);
            System.out.println(jListTags.locationToIndex(evt.getPoint()));
            
            System.out.println(getResult());
            */
            ItemChosenEvent newEvent = new ItemChosenEvent(evt.getSource(), getResult());
            synchronized (this) {
                for (ItemChosenListener l : listeners) {
                    l.itemChosen(newEvent); // fire the event to this listener
                }
            }

        }
    }//GEN-LAST:event_jListTagsMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList jListTags;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldSearch;
    // End of variables declaration//GEN-END:variables

    public synchronized void addItemChosenListener(ItemChosenListener hearer) {
        listeners.add(hearer);
    }

    public synchronized void removeItemChosenListener(ItemChosenListener hearer) {
        listeners.remove(hearer);
    }
    
    public static class ItemChosenEvent extends java.util.EventObject {
        
        private final Tag selection;
        
        public ItemChosenEvent(Object source, Tag selection) {
            super(source);
            this.selection = selection;
        }
        
        public Tag getSelection(){
            return selection;
        }
    }
    
    public interface ItemChosenListener extends java.util.EventListener {
        void itemChosen(ItemChosenEvent m);
    }
}
