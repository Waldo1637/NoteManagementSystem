package rms.view.util;

import java.awt.BorderLayout;
import java.awt.Component;
import javax.swing.JFrame;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;

/**
 * Generic panel for listing tags and instantly searching the list. Supports
 *  selecting multiple tags.
 * 
 * TODO: incomplete
 * 
 * @author Timothy
 */
public class JPanelTagSelection2 extends javax.swing.JPanel {

    /**
     * Creates new form JPanelTagSelection2
     */
    public JPanelTagSelection2() {
        initComponents();
        initComponentsMore();
    }
    
    private void initComponentsMore(){
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            int width = 50;
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(width);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(width);
            jTable1.getColumnModel().getColumn(0).setMinWidth(width);
        }
        
        
        TableCellRenderer cellRenderer0 = jTable1.getCellRenderer(0, 0);
        TableCellRenderer cellRenderer1 = jTable1.getCellRenderer(0, 1);
        
        /* READ THESE:
            http://stackoverflow.com/questions/9294108/is-there-a-way-to-add-a-row-selected-listener-on-jtable
            http://stackoverflow.com/questions/20327005/jtable-actionlistener-for-select-a-row
        
            would this listener fire before the table is repainted so I could just not select the checkbox row?
        */       
        
        //TODO: Maybe need to override BooleanRenderer from Jtable for the Boolean row
        MyCellRenderer cellRenderer = new MyCellRenderer();
        jTable1.setDefaultRenderer(String.class, new DefaultTableCellRenderer(){
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                setBorder(noFocusBorder);
                return this;
            }

        });
        
        //jTable1.setDefaultRenderer(Boolean.class, new Boolean);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextFieldSearch = new javax.swing.JTextField();

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new MyTableModel());
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        jTable1.setRowSelectionAllowed(true);
        jTable1.setShowHorizontalLines(false);
        jTable1.setShowVerticalLines(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jTextFieldSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jTextFieldSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldSearch;
    // End of variables declaration//GEN-END:variables

    private class MyTableModel extends AbstractTableModel {

        private final Object[][] data;

        public MyTableModel() {
            //TODO: this is temp data
            data = new Object[][]{
                {true, "one"},
                {true, "two"},
                {false, "three"},
                {false, "four"},
                {true, "five"}
            };
        }

        @Override
        public int getRowCount() {
            return data.length;
        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            return data[rowIndex][columnIndex];
        }

        @Override
        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }

        @Override
        public boolean isCellEditable(int row, int col) {
            return col == 0;
        }

        /*
         * Don't need to implement this method unless your table's
         * data can change.
         */
        @Override
        public void setValueAt(Object value, int row, int col) {
            data[row][col] = value;
            fireTableCellUpdated(row, col);
        }

    }
    
    public class MyCellRenderer extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            setBorder(noFocusBorder);
            return this;
        }
    }

    public static void main(String[] args) {
        final JFrame x = new JFrame();
        x.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        x.add(new JPanelTagSelection2(), BorderLayout.CENTER);
        x.pack();

        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                x.setVisible(true);
            }
        });
    }
}
