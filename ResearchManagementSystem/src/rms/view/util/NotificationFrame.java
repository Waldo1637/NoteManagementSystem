package rms.view.util;

import java.awt.Color;
import java.awt.Container;
import javax.swing.BorderFactory;
import javax.swing.JButton;

/**
 * Generic frame for displaying notification messages over the main content
 *
 * @author Timothy
 */
public class NotificationFrame extends javax.swing.JFrame {

    /**
     * Creates new form NotificationFrame
     */
    public NotificationFrame() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     *
     * @return the Container to which content should be added
     */
    public Container getInnerContentPanel() {
        return jPanelMainContent;
    }

    /**
     * Displays a notification with the given string for a short period of time
     *
     * @param message
     */
    public void displayNotification(String message) {
        new Notification(message).display();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jPanelMainContent = new javax.swing.JPanel();
        jPanelEast = new javax.swing.JPanel();
        jPanelSouth = new javax.swing.JPanel();
        jPanelNotifications = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jLayeredPane1.setLayout(new javax.swing.OverlayLayout(jLayeredPane1));

        javax.swing.GroupLayout jPanelMainContentLayout = new javax.swing.GroupLayout(jPanelMainContent);
        jPanelMainContent.setLayout(jPanelMainContentLayout);
        jPanelMainContentLayout.setHorizontalGroup(
            jPanelMainContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelMainContentLayout.setVerticalGroup(
            jPanelMainContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLayeredPane1.add(jPanelMainContent);

        jPanelEast.setOpaque(false);
        jPanelEast.setLayout(new java.awt.BorderLayout());

        jPanelSouth.setOpaque(false);
        jPanelSouth.setLayout(new java.awt.BorderLayout());

        jPanelNotifications.setOpaque(false);
        jPanelNotifications.setLayout(new javax.swing.BoxLayout(jPanelNotifications, javax.swing.BoxLayout.Y_AXIS));
        jPanelSouth.add(jPanelNotifications, java.awt.BorderLayout.SOUTH);

        jPanelEast.add(jPanelSouth, java.awt.BorderLayout.EAST);

        jLayeredPane1.add(jPanelEast);
        jLayeredPane1.setLayer(jPanelEast, javax.swing.JLayeredPane.DRAG_LAYER);

        getContentPane().add(jLayeredPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private class Notification extends JButton {

        public Notification(String message) {
            this.setText(formatText(message));
            this.setBackground(Color.gray);
            this.setBorderPainted(false);
            this.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(7, 7, 7, 7), BorderFactory.createLineBorder(Color.darkGray, 2, true)));
            this.setCursor(null);
            this.setAlignmentX(RIGHT_ALIGNMENT);
            this.setHorizontalAlignment(LEFT);
            this.setRolloverEnabled(false);
            this.setFocusable(false);
        }

        private String formatText(String input) {
            final int LL = 30;

            StringBuffer sb_in = new StringBuffer(input);
            StringBuilder sb_out = new StringBuilder("<html>");
            while (sb_in.length() > LL) {
                sb_out.append(sb_in.substring(0, LL)).append("<br>");
                sb_in.delete(0, LL);
            }
            sb_out.append(String.format("%s", sb_in));
            sb_out.append("</html>");

            return sb_out.toString();
        }

        public void display() {
            new NoteLifetime(this).start();
        }
    }

    private class NoteLifetime extends Thread {

        private final Notification note;

        public NoteLifetime(Notification note) {
            this.note = note;
        }

        @Override
        public void run() {
            try {
                jPanelNotifications.add(note);
                revalidate();
                repaint();
                Thread.sleep(2000);
            } catch (InterruptedException ex) {
            } finally {
                jPanelNotifications.remove(note);
                revalidate();
                repaint();
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanelEast;
    private javax.swing.JPanel jPanelMainContent;
    private javax.swing.JPanel jPanelNotifications;
    private javax.swing.JPanel jPanelSouth;
    // End of variables declaration//GEN-END:variables
}
